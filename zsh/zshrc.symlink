# enable this line for profiling (also zprof at the end of this file)
# zmodload zsh/zprof

autoload -U promptinit; promptinit

# this function can be used in place of `source` to profile zsh startup time
function load() {
    timer=$(($(gdate +%s%N)/1000000))

    source $1

    now=$(($(gdate +%s%N)/1000000))
    elapsed=$(($now-$timer))
    echo $elapsed":" $1
}

export PATH="$PATH:/usr/local/bin"

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/projects

# Download Znap, if it's not there yet.
[[ -f ~/Git/zsh-snap/znap.zsh ]] ||
    git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git ~/Git/zsh-snap

# Start Znap
source ~/.zsh-snap/znap.zsh

# `znap prompt` makes your prompt visible in just 15-40ms!
znap prompt thecodesmith/pure

zstyle :prompt:pure:path color '45'
zstyle :prompt:pure:git:dirty color red
zstyle :prompt:pure:prompt:success color white
zstyle :prompt:pure:git:arrow color yellow

# `znap source` automatically downloads and starts your plugins.
# znap source BrandonRoehl/zsh-clean
# znap source marlonrichert/zsh-autocomplete
# znap source ohmyzsh/ohmyzsh plugins/fzf
# znap source ohmyzsh/ohmyzsh plugins/vi-mode
# znap source ohmyzsh/ohmyzsh plugins/web-search
# znap source ohmyzsh/ohmyzsh plugins/z
# znap source zsh-users/zsh-autosuggestions
# znap source zsh-users/zsh-completions
# znap source zsh-users/zsh-syntax-highlighting

# `znap eval` caches and runs any kind of command output for you.
# znap eval iterm2 'curl -fsSL https://iterm2.com/shell_integration/zsh'

# `znap function` lets you lazy-load features you don't always need.
# znap function _pyenv pyenvn 'eval "$( pyenv init - --no-rehash )"'
# compctl -K    _pyenv pyenv

# # initialize custom prompt
# autoload -U promptinit
# fpath=($HOME/.dotfiles/zsh-clean-prompt $fpath)
# promptinit
# prompt codesmith

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

os='unknown'
unamestr=`uname -s`
if [[ "$unamestr" == "Darwin" ]]
then
  os='OSX'
elif [[ "$unamestr" == "Linux" ]]
then
  os='LINUX'
fi
export OS=$os

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit
# setopt completealiases

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
unsetopt nomatch

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# enable this line for profiling (also zmodload at the top of this file)
# zprof

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
