#!/usr/bin/env ruby

require 'json'
require 'http'

BITBUCKET_URL = 'https://stash.jamf.build/rest/api/1.0'
PROJECT_CACHE_FILE = '/Users/brian/.stash/data/projects.json'

$token = File.read("/Users/brian/.stash/token")
$http = HTTP.auth("Bearer #{$token}")
$user_flags = []

def get_projects
    response = $http.get("#{BITBUCKET_URL}/projects?limit=1000")
    if not File.file? PROJECT_CACHE_FILE
        File.open(PROJECT_CACHE_FILE, 'w') do |f|
            f.write response.to_s
        end
    end

    f = File.read PROJECT_CACHE_FILE
    data = JSON.parse f

    key_width = field_width data['values'], 'key'
    name_width = field_width data['values'], 'name'

    data['values'].sort_by {|v| v['name'].downcase }.each do |v|
        puts "#{v['key'].ljust(key_width)}  #{v['name'].ljust(name_width)}  #{v['description']}"
    end
end

def get_repositories(project)
    response = $http.get "#{BITBUCKET_URL}/projects/#{project}/repos?limit=1000"
    data = JSON.parse(response.to_s)

    slug_width = field_width data['values'], 'slug'

    data['values'].sort_by {|v| v['name'].downcase }.each do |v|
        puts v['slug'].ljust(slug_width)
    end
end

def field_width(array, key)
    array.map {|v| v[key].length }.max
end

def create_repo(project, repo)
    response = $http.post "#{BITBUCKET_URL}/projects/#{project}/repos",
                          :json => { :name => repo }
    if not response.status.success?
        puts "Error [#{response.code}]: #{response.to_s}"
        exit 1
    else
        puts "Repo created at https://stash.jamf.build/projects/#{project}/repos/#{repo}"
        puts "To add this remote to an existing repo, run this:"
        puts ""
        puts "    git remote add origin stash:#{project}/#{repo}"
    end
end

def parse_args(args)
  options = {
    :verb => args[0],
    :thing => args[1],
    :thing2 => args[2]
  }

  flags = []

  if args.include?('-q') or args.include?('--quiet')
    flags << '--quiet'
  end

  if args.include?('-h') or args.include?('--help')
    flags << '--help'
  end

  $user_flags = flags

  options
end

def run()
    command = parse_args ARGV
    verb = command[:verb]
    thing = command[:thing]
    thing2 = command[:thing2]

    if $user_flags.include? '--help'
      puts %q(
Available Commands:
  get [projects|repositories]
  create [project] [repo]
)
      return
    end

    if verb == "get"
        get_projects if thing == "projects"
        if thing == "repositories"
            (puts "Error: please specify a project" and return) if command[:thing2].nil?
            get_repositories(command[:thing2])
        end
    elsif verb == "create"
      usage = "Usage:\n  stash-cli create [project] [repo]"
      abort "Error: No project specified\n#{usage}" if thing.nil?
      abort "Error: No repo specified\n#{usage}" if thing2.nil?
      create_repo thing, thing2
    end
end

run
