" " .vimrc

" vimrc is not vi-compatible
set nocompatible

" Setting up Vundle - the vim plugin bundler

""" Vundle plugin manager {{{
let vundle_first_run=0
let vundle_readme=expand('~/.vim/bundle/Vundle.vim/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle..."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/Vundle.vim ~/.vim/bundle/Vundle.vim
  let vundle_first_run=1
endif
""" }}}

""" Initialize Vundle {{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
""" }}}

""" Put Vundle plugins here {{{
Plugin 'gmarik/Vundle.vim'

Plugin 'thecodesmith/vim-colorscheme-codesmith' " my custom darcula-like colorscheme
Plugin 'tpope/vim-commentary'                   " comments for different filetypes
Plugin 'tpope/vim-abolish'                      " auto-correct custom words, coerce to snake-case, etc
" Plugin 'tpope/vim-ragtag'                       " adds closing tags for tag-based languages (html, xml, erb)
Plugin 'tpope/vim-surround'                     " change surrounding elements (quotes, parens, etc.)
Plugin 'tpope/vim-repeat'                       " allow . to repeat more actions
Plugin 'tpope/vim-fugitive'                     " TODO: learn to use this more. git wrapper
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-obsession'                    " enable vim sessions
Plugin 'godlygeek/tabular'                      " quickly align elements
Plugin 'terryma/vim-multiple-cursors'           " ...
Plugin 'Raimondi/delimitMate'                   " TODO: replace this with a better one. inserts matching quotes, brackets, etc.
Plugin 'vim-scripts/taglist.vim'                " TODO: learn to use this. shows file structure (functions, etc) in a split window
Plugin 'scrooloose/nerdtree'                    " file tree browser
Plugin 'Xuyuanp/nerdtree-git-plugin'            " show git status in nerdtree
Plugin 'kien/ctrlp.vim'                         " file path fuzzy search
Plugin 'dkprice/vim-easygrep'                   " TODO: learn to use this
Plugin 'msanders/snipmate.vim'                  " snippets
Plugin 'rstacruz/sparkup'                       " HTML shorthand support
Plugin 'airblade/vim-rooter'                    " Automatically change to root directory of project
Plugin 'christoomey/vim-tmux-navigator'         " Navigate between tmux panes and vim splits
Plugin 'christoomey/vim-conflicted'
Plugin 'editorconfig/editorconfig-vim'          " Support for .editorconfig files
Plugin 'chrisbra/vim-autoread'
Plugin 'powerman/vim-plugin-AnsiEsc'            " Use :AnsiEsc to enable colorized text
" Plugin 'vim-syntastic/syntastic'

" " Language support
" Plugin 'sheerun/vim-polyglot'
" Plugin 'thecodesmith/vim-groovy'
Plugin 'udalov/kotlin-vim'
Plugin 'chr4/nginx.vim'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'milch/vim-fastlane'
Plugin 'rust-lang/rust.vim'
" " Plugin 'tpope/vim-fireplace'
" " Plugin 'tpope/vim-classpath'
" " TODO: This vim-gradle plugin is good, but should be changed to use the same syntax
" " highlighting as the vim-groovy plugin.
" " Plugin 'vim-scripts/vim-gradle' " Add gradle compiler for vim, groovy syntax highlighting in gradle files
" """ }}} End Vundle plugins

""" Finalize Vundle
call vundle#end()

""" Installing plugins on first run, quits when done {{{
if vundle_first_run == 1
  :silent! PluginInstall
  :qa
endif
""" }}}

" Finished setting up Vundle

syntax enable
filetype on
filetype plugin on
filetype indent on

set term=screen-256color
set guifont=Lucida\ Console
colorscheme codesmith

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set copyindent
set nowrap
set backspace=indent,eol,start

set number          " show line numbers
set ruler
set showcmd
set ignorecase      " ignore case when searching
set smartcase       " ignore case only if search pattern is all lowercase
set hlsearch        " highlight search terms
set incsearch       " show search matches while typing
highlight Search ctermbg=yellow ctermfg=black cterm=NONE
set history=1000    " remember more commands and search history
set undolevels=1000 " increase undo levels
set wildignore=*.swp,*.so,*.bak,*.pyc,*.class,*.zip,*/tmp/*
set noerrorbells    " don't beep

set hidden          " hide buffers instead of closing them
set nobackup        " don't write a backup file
set noswapfile      " don't write a swap file

set tags=tags;      " Set the tags file

" Allow using jk/kj instead of <esc>
inoremap jk <Esc>
inoremap kj <Esc>

" Save some keystrokes
nnoremap ; :

" Change leader key from \ to <Space>
let mapleader = "\<Space>"

" Map <leader>/ to clear search highlighting
nnoremap <silent> <leader>/ :nohlsearch<CR>

" Use Perl/Python style regex when searching
nnoremap / /\v
vnoremap / /\v

""" Plugin-specific configurations {{{

" Polyglot
let g:polyglot_disabled = ['groovy', 'jenkins', 'markdown']

" CtrlP
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_clear_cache_on_exit = 0

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" ****** Learn Vimscript the Hard Way ****** "
" i.e., miscellaneous experiments...

" Move current line up (-) or down (_)
noremap - ddp
noremap _ dd<esc>kP

" Convert current word to uppercase
inoremap <c-u> <esc>mrviwU`ra
nnoremap <c-u>      mrviwU`r

" Disable readonly in vimdiff mode
if &diff
  set noreadonly
endif

" ****************************************** "

" EasyGrep
let g:EasyGrepMode=2
let g:EasyGrepCommand=0
let g:EasyGrepRecursive=1
let g:EasyGrepIgnoreCase=1

" Multiple cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_quit_key='<Esc>'

" NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.class$']
nnoremap <leader>n :NERDTreeToggle<CR>
vnoremap <leader>n :NERDTreeToggle<CR>

" Slime
let g:slime_python_ipython = 1

" Scratch
nnoremap <leader>s :Scratch<CR>
vnoremap <leader>s :Scratch<CR>

" Tabularize
nnoremap <leader>= :Tabularize<Space>/
vnoremap <leader>= :Tabularize<Space>/

" Taglist
if executable('ctags')
  noremap <F4> <Esc>:TlistToggle<CR>
  let s:tlist_def_groovy_settings = 'groovy;p:package;c:class;i:interface;f:function;v:variables'
endif

""" End plugin-specific configurations }}}

" Place cursor on indented line between curly braces
inoremap {<CR> {<CR>}<Esc>O

" Edit $MYVIMRC on the fly
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Open a split window with <leader>w and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Go to previous tab
nnoremap gr gT

" F2 toggles showing line numbers
noremap <F2> :set invnumber<cr>a
noremap! <F2> <Esc>:set invnumber<cr>

" F5 toggles binary mode
noremap <F5> :%!xxd<cr>a
noremap <S-F5> <Esc>:%!xxd -r<cr>

" F6 deletes extra spaces at the end of a line and changes tabs to spaces
noremap <F6> :retab<cr>:%s/\s\+$//<cr>:noh<cr>
noremap! <F6> <Esc>:retab<cr>:%s/\s\+$//<cr>:noh<cr>a

function! <SID>StripTrailingWhitespace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

" Autoload .vimrc changes
autocmd! BufWritePost .vimrc source %

" Fix indent issues in (x|ht)ml files
autocmd BufEnter *.xml  :filetype indent off
autocmd BufEnter *.html :filetype indent off

" Fix syntax highlighting problems with Gradle and Jenkins files
autocmd BufEnter Jenkinsfile,build.gradle :set ft=groovy
autocmd BufEnter Jenkinsfile,build.gradle :syntax sync fromstart

" Strip trailing whitespace automatically on file save
autocmd BufWritePre * :call <SID>StripTrailingWhitespace()

" Toggle paste insert mode
set pastetoggle=<F8>

" Highlight column 80 in Python files
augroup python
  " clear augroup when reloading vimrc
  autocmd!
  autocmd FileType python set colorcolumn=80
augroup END

" Fix crontab
autocmd filetype crontab setlocal nobackup nowritebackup

" Use yaml filetype for Jinja2 files
autocmd BufEnter *.j2 :set filetype=yaml
autocmd BufEnter *.yaml,*.yml :set ts=2 sw=2 sts=2

autocmd BufEnter *.kts :set filetype=kotlin

" Ctrl-b switches to previously open buffer
nnoremap <C-b> :b#<CR>

" Don't lose selection after indent
vnoremap < <gv
vnoremap > >gv

" Save all buffers when vim loses focus
au FocusLost * :wa

" Format XML
map @@x !%xmllint --format -<CR>

" Format JSON
map @@j :%!python3 -m json.tool<CR>

" Open file under cursor
noremap <C-i> :call OpenVariableUnderCursor(expand("<cword>"))<CR>
noremap <C-t> :call OpenTestUnderCursor(bufname("%"))<CR>
noremap <leader>h :call FindSubClasses(expand("<cword>"))<CR>

function! OpenVariableUnderCursor(varName)
  let filename = substitute(a:varName, '(<w+>)', 'u1', 'g')
  :call OpenFileUnderCursor(filename)
endfunction

function! OpenTestUnderCursor(varName)
  let filename = substitute(a:varName, '\.groovy', 'Spec', '')
  let filename = substitute(filename, 'grails-app/\(controllers\|domain\|services\)', 'src/test/groovy', '')
  :call OpenFileUnderCursor(filename)
endfunction

function! OpenFileUnderCursor(filename)
  let ext = fnamemodify(expand("%:p"), ":t:e")
  execute ":find " . a:filename . "." . ext
endfunction

function! FindSubClasses(filename)
  execute ":Grep (implements|extends) " . a:filename
endfunction

" Enable this line to provide syntax element identification
nmap <C-i> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" vimdiff mappings
if &diff
  map <leader>1 :diffget LOCAL<CR>
  map <leader>2 :diffget BASE<CR>
  map <leader>3 :diffget REMOTE<CR>
endif

function! CanonicalizeGradleDependencies()
  let @q="/dependencies\<CR>jvk$%k$:sort<CR>/compile project<CR>O<ESC>€ýazzzt/providedCompile<CR>O<ESC>€ýa/runtime<CR>O<ESC>/runtime project<CR>O<ESC>/testCompile<CR>O<ESC>zt/testcompile project<CR>O<ESC>€ýagg/compile project<CR>dap{{gg/compile <CR>PLzzzt/runtime project<CR>dap/runtime<CR>Pu/runtime <CR>P/testcompile <CR>project<CR>zz/}<CR>O<ESC>€ýagg/testcompile project<CR>dap{/testcompile P/}<CR>k:w<CR>kkkgg/dependencies<CR>;noh<CR>"
  execute '@q'
endfunc

function! s:syntax_query() abort
  for id in synstack(line("."), col("."))
    echo synIDattr(id, "name")
  endfor
endfunction
command! SyntaxQuery call s:syntax_query()
